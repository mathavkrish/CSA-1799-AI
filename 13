def evaluate(board):
    for row in board + list(zip(*board)) + [board[i][i] for i in range(3)] + [board[i][2 - i] for i in range(3)]:
        if all(cell == 'X' for cell in row):
            return 10
        elif all(cell == 'O' for cell in row):
            return -10
    return 0

def is_moves_left(board):
    return any(cell == ' ' for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    score = evaluate(board)

    if score != 0:
        return score - depth if score > 0 else score + depth

    if not is_moves_left(board):
        return 0

    eval_fn = max if is_maximizing else min
    return eval_fn(minimax(board[:i] + [row[:j] + ['X' if is_maximizing else 'O'] + row[j + 1:] for j in range(3)] + board[i + 1:], depth + 1, not is_maximizing) for i in range(3) for row in [board[i]])

def find_best_move(board):
    return max(((i, j) for i in range(3) for j in range(3) if board[i][j] == ' '), key=lambda move: minimax(board[:move[0]] + [row[:move[1]] + ['X'] + row[move[1] + 1:] for row in board[move[0]:move[0] + 1]] + board[move[0] + 1:], 0, False))

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)

        player_row, player_col = map(int, input("Enter your move (row and column, space-separated): ").split())

        if board[player_row][player_col] == ' ':
            board[player_row][player_col] = 'O'

            if evaluate(board) == -10:
                print("You win!")
                break
            elif not is_moves_left(board):
                print("It's a draw!")
                break

            print("\nComputer's turn:")
            computer_row, computer_col = find_best_move(board)
            board[computer_row][computer_col] = 'X'

            if evaluate(board) == 10:
                print_board(board)
                print("Computer wins!")
                break
            elif not is_moves_left(board):
                print_board(board)
                print("It's a draw!")
                break
        else:
            print("Cell already occupied. Try again.")

if __name__ == "__main__":
    main()
