import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_derivative(x):
    return x * (1 - x)

def initialize_weights(input_size, hidden_size, output_size):
    np.random.seed(42)
    weights_input_hidden = 2 * np.random.random((input_size, hidden_size)) - 1
    weights_hidden_output = 2 * np.random.random((hidden_size, output_size)) - 1
    return weights_input_hidden, weights_hidden_output

def feedforward(inputs, weights_input_hidden, weights_hidden_output):
    hidden_layer_input = np.dot(inputs, weights_input_hidden)
    hidden_layer_output = sigmoid(hidden_layer_input)

    output_layer_input = np.dot(hidden_layer_output, weights_hidden_output)
    predicted_output = sigmoid(output_layer_input)

    return hidden_layer_input, hidden_layer_output, output_layer_input, predicted_output

def backpropagation(inputs, target, hidden_layer_output, output, weights_hidden_output):
    output_error = target - output
    output_delta = output_error * sigmoid_derivative(output)

    hidden_layer_error = output_delta.dot(weights_hidden_output.T)
    hidden_layer_delta = hidden_layer_error * sigmoid_derivative(hidden_layer_output)

    return output_delta, hidden_layer_delta

def update_weights(inputs, hidden_layer_output, output_delta, hidden_layer_delta, weights_input_hidden, weights_hidden_output, learning_rate):
    weights_hidden_output += hidden_layer_output.T.dot(output_delta) * learning_rate
    weights_input_hidden += inputs.T.dot(hidden_layer_delta) * learning_rate

def train_neural_network(inputs, targets, hidden_size, epochs, learning_rate):
    input_size = len(inputs[0])
    output_size = len(targets[0])

    weights_input_hidden, weights_hidden_output = initialize_weights(input_size, hidden_size, output_size)

    for epoch in range(epochs):
        for i in range(len(inputs)):
            input_data = np.array([inputs[i]])
            target_data = np.array([targets[i]])

            hidden_layer_input, hidden_layer_output, output_layer_input, predicted_output = feedforward(input_data, weights_input_hidden, weights_hidden_output)

            output_delta, hidden_layer_delta = backpropagation(input_data, target_data, hidden_layer_output, predicted_output, weights_hidden_output)

            update_weights(input_data, hidden_layer_output, output_delta, hidden_layer_delta, weights_input_hidden, weights_hidden_output, learning_rate)

    return weights_input_hidden, weights_hidden_output

def predict(input_data, weights_input_hidden, weights_hidden_output):
    _, _, _, predicted_output = feedforward(input_data, weights_input_hidden, weights_hidden_output)
    return predicted_output

# Example usage:
inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
targets = np.array([[0], [1], [1], [0]])

hidden_size = 4
epochs = 10000
learning_rate = 0.1

trained_weights_input_hidden, trained_weights_hidden_output = train_neural_network(inputs, targets, hidden_size, epochs, learning_rate)

# Test the trained neural network
for input_data in inputs:
    prediction = predict(np.array([input_data]), trained_weights_input_hidden, trained_weights_hidden_output)
    print(f"Input: {input_data}, Predicted Output: {prediction[0]}")
