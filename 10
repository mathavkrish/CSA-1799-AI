from heapq import heappop, heappush

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start node to current node
        self.h = 0  # Heuristic estimate from current node to goal node
        self.f = 0  # Total cost (g + h)

def heuristic(node, goal):
    return abs(node.position[0] - goal[0]) + abs(node.position[1] - goal[1])

def astar(grid, start, goal):
    open_set = []
    closed_set = set()

    start_node = Node(start)
    goal_node = Node(goal)

    heappush(open_set, (start_node.f, start_node))

    while open_set:
        current_node = heappop(open_set)[1]

        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]

        closed_set.add(current_node.position)

        for neighbor in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
            neighbor_position = (current_node.position[0] + neighbor[0], current_node.position[1] + neighbor[1])

            if (
                0 <= neighbor_position[0] < len(grid)
                and 0 <= neighbor_position[1] < len(grid[0])
                and grid[neighbor_position[0]][neighbor_position[1]] != 1
                and neighbor_position not in closed_set
            ):
                neighbor_node = Node(neighbor_position, current_node)
                neighbor_node.g = current_node.g + 1
                neighbor_node.h = heuristic(neighbor_node, goal)
                neighbor_node.f = neighbor_node.g + neighbor_node.h

                heappush(open_set, (neighbor_node.f, neighbor_node))

    return None  # No path found

# Example usage:
grid_example = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0]
]

start_example = (0, 0)
goal_example = (4, 4)

path_example = astar(grid_example, start_example, goal_example)

if path_example:
    print("A* Path:")
    for node in path_example:
        print(node)
else:
    print("No path found.")
