def evaluate(board):
    for row in board + list(zip(*board)) + [board[i][i] for i in range(3)] + [board[i][2 - i] for i in range(3)]:
        if all(cell == 'X' for cell in row):
            return 10
        elif all(cell == 'O' for cell in row):
            return -10
    return 0

def is_moves_left(board):
    return any(cell == ' ' for row in board for cell in row)

def minimax(board, depth, alpha, beta, is_maximizing):
    score = evaluate(board)

    if score != 0:
        return score - depth if score > 0 else score + depth

    if not is_moves_left(board):
        return 0

    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    eval_score = minimax(board, depth + 1, alpha, beta, False)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval_score)
                    alpha = max(alpha, eval_score)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    eval_score = minimax(board, depth + 1, alpha, beta, True)
                    board[i][j] = ' '
                    min_eval = min(min_eval, eval_score)
                    beta = min(beta, eval_score)
                    if beta <= alpha:
                        break
        return min_eval

def find_best_move(board):
    best_val = float('-inf')
    best_move = (-1, -1)

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_val = minimax(board, 0, float('-inf'), float('inf'), False)
                board[i][j] = ' '

                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val

    return best_move

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]

    while True:
        print_board(board)

        player_row, player_col = map(int, input("Enter your move (row and column, space-separated): ").split())

        if board[player_row][player_col] == ' ':
            board[player_row][player_col] = 'O'

            if evaluate(board) == -10:
                print("You win!")
                break
            elif not is_moves_left(board):
                print("It's a draw!")
                break

            print("\nComputer's turn:")
            computer_row, computer_col = find_best_move(board)
            board[computer_row][computer_col] = 'X'

            if evaluate(board) == 10:
                print_board(board)
                print("Computer wins!")
                break
            elif not is_moves_left(board):
                print_board(board)
                print("It's a draw!")
                break
        else:
            print("Cell already occupied. Try again.")

if __name__ == "__main__":
    main()
